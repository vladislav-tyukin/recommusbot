import asyncio
import database
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import pandas as pd
import random
from token_tg import token_teleg

#update ‚Äî –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏, –ø—Ä–∏—à–µ–¥—à–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å).
#callback_query ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ update –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–Ω–∏–∫—à–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏ inline.
#query ‚Äî —ç—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ callback_query, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è.

DATASET_PATH = "SpotifyFeatures.csv"
database.init_db()

def load_dataset():
    return pd.read_csv(DATASET_PATH)

dataset = load_dataset()

async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    username = user.username

    
    if database.is_new_user(user_id):
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç {username}! –í—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!")
        await send_main_menu_new_user(update)
    else:
        await update.message.reply_text(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}! –ü—Ä–æ–¥–æ–ª–∂–∏–º —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.")
        await send_main_menu(update)

    
async def send_main_menu_new_user(update: Update):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", callback_data="get_recommendation")],
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä—ã", callback_data="start_genre_survey")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def start_genre_survey(update: Update, context: CallbackContext):
    genres = dataset["genre"].unique().tolist()
    genres_text = "\n".join([f"{genre}" for genre in genres])

    if update.callback_query:
        query = update.callback_query
        await query.answer() 
        await query.message.reply_text(
            f"–û—Ü–µ–Ω–∏—Ç–µ –∂–∞–Ω—Ä—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ñ–∞–Ω—Ä - –æ—Ü–µ–Ω–∫–∞'). –ü—Ä–∏–º–µ—Ä:\nRock - 5\n\n–ñ–∞–Ω—Ä—ã:\n{genres_text}"
        )
    else:
        await update.message.reply_text(
            f"–û—Ü–µ–Ω–∏—Ç–µ –∂–∞–Ω—Ä—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ñ–∞–Ω—Ä - –æ—Ü–µ–Ω–∫–∞'). –ü—Ä–∏–º–µ—Ä:\nRock - 5\n\n–ñ–∞–Ω—Ä—ã:\n{genres_text}"
        )



async def handle_genre_rating(update: Update, context: CallbackContext):
    text = update.message.text
 

    try:
      
        track_genre, rating = text.split(" - ")
        rating = int(rating)
        track_genre = track_genre.strip() 

        if rating < 1 or rating > 5:
            await update.message.reply_text("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
            return

        
        genres = dataset["genre"].unique().tolist()
        if track_genre not in genres:
            await update.message.reply_text(f"–ñ–∞–Ω—Ä–∞ '{track_genre}' –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        user = update.message.from_user
        user_id = user.id
        user_username = user.username

       
        rated_genres_count = database.get_rated_genres_count(user_id)
        if rated_genres_count >= 5:
            await update.message.reply_text("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ 5 –∂–∞–Ω—Ä–æ–≤. –ë–æ–ª—å—à–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –Ω–µ–ª—å–∑—è.")
            return

        if database.check_genre_rating(user_id, track_genre):
            await update.message.reply_text(f"–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –∂–∞–Ω—Ä '{track_genre}'.")
            return

        database.add_genre_rating(user_id, user_username, track_genre, rating)
        await update.message.reply_text(f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –∂–∞–Ω—Ä '{track_genre}' –Ω–∞ {rating}/5.")

        
        rated_genres_count += 1
        if rated_genres_count >= 5:
            await update.message.reply_text("–í—ã –æ—Ü–µ–Ω–∏–ª–∏ 5 –∂–∞–Ω—Ä–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º!")
            await send_recommendation(update, context)
        else:
            await update.message.reply_text(f"–û—Ü–µ–Ω–∏—Ç–µ –µ—â—ë {5 - rated_genres_count} –∂–∞–Ω—Ä–æ–≤.")

    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–ñ–∞–Ω—Ä - –û—Ü–µ–Ω–∫–∞'. –ü—Ä–∏–º–µ—Ä: 'Rock - 5'")


async def send_main_menu(update: Update):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", callback_data="get_recommendation")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏", callback_data="view_ratings")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)




def get_random_track():
    random_index = random.randint(0, len(dataset) - 1)
    track = dataset.iloc[random_index]
    return {
        "id": track["track_id"],
        "name": track["track_name"],
        "artist": track["artist_name"],
        "genre": track["genre"],
        "link": f"https://open.spotify.com/track/{track['track_id']}",
    }





async def send_recommendation(update: Update, context: CallbackContext):
    track = get_random_track()

    keyboard = [
        [InlineKeyboardButton(str(i), callback_data=f"rate_{track['id']}_{i}") for i in range(1, 6)],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query: #nazhal knopku
        query = update.callback_query
        await query.message.reply_text(
            f"üéµ *{track['name']}* - {track['artist']}\n–ñ–∞–Ω—Ä: {track['genre']}\n[–°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫]({track['link']})",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else: # net callback zaprosa
        await update.message.reply_text(
            f"üéµ *{track['name']}* - {track['artist']}\n–ñ–∞–Ω—Ä: {track['genre']}\n[–°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫]({track['link']})",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )




async def rate_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()


    _, track_id, rating = query.data.split("_")
    rating = int(rating)

    user = query.from_user
    user_id = user.id

  
    track = dataset[dataset["track_id"] == track_id].iloc[0]
    track_name = track["track_name"]
    track_artist = track["artist_name"]
    track_genre = track["genre"]
    track_link = f"https://open.spotify.com/track/{track_id}"

  
    if database.check_rating(user_id, track_id):
        try:
            database.update_rating(user_id, track_id, rating)
        except ValueError as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
    else:
        try:
            database.add_rating(user_id, user.username, track_id, track_genre, rating)
        except ValueError as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")

    
    rating_text = f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞: {rating}/5"

    keyboard = [
        [InlineKeyboardButton(str(i), callback_data=f"rate_{track_id}_{i}") for i in range(1, 6)],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

   
    await query.edit_message_text(
        f"üéµ *{track_name}* - {track_artist}\n–ñ–∞–Ω—Ä: {track_genre}\n[–°–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫]({track_link})\n\n{rating_text}",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

   
    await asyncio.sleep(1)

    
    await send_recommendation(update, context)



async def show_next_step(query):
    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫", callback_data="get_recommendation")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)




async def view_ratings(update: Update, context: CallbackContext):
    user = update.callback_query.from_user
    user_id = user.id
    query = update.callback_query

  
    ratings = database.get_user_ratings(user_id)

    if not ratings:
        await query.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫.")
        return

    ratings_text = ""
    for track_id, track_genre, rating in ratings:
        
        track = dataset[dataset["track_id"] == track_id]
        if not track.empty:
            track_name = track.iloc[0]["track_name"]
            track_genre = track.iloc[0]["genre"]
            track_url = f"https://open.spotify.com/track/{track_id}"
            ratings_text += f"üéµ *{track_name}* - –ñ–∞–Ω—Ä: {track_genre}, –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}/5\n"
        else:
            ratings_text += f"‚ùì –¢—Ä–µ–∫ ID: {track_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ), –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}/5\n"


    await query.message.reply_text(
        f"–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:\n{ratings_text}",
        parse_mode="Markdown"
    )

    
    keyboard = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)


async def main_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", callback_data="get_recommendation")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏", callback_data="view_ratings")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)




def main():
    application = Application.builder().token(token_teleg).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(rate_callback, pattern="^rate_"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(view_ratings, pattern="^view_ratings$"))
    application.add_handler(CallbackQueryHandler(send_recommendation, pattern="^get_recommendation$"))
    application.add_handler(MessageHandler(filters.TEXT, handle_genre_rating))
    application.add_handler(CallbackQueryHandler(start_genre_survey, pattern="^start_genre_survey$"))   


    application.run_polling()

if __name__ == "__main__":
    main()
